openapi: "3.0.2"
info:
  description: "This is a simple API."
  version: "1.0.0"
  title: "UserDemo"
  contact:
    email: "siggielittle@mail.ru"
paths:
  /users/{id}:
    parameters:
      - name: id
        in: path
        description: Id of the user
        required: true
        schema:
          type: integer
          format: int64
          example: 11
    get:
      tags:
        - user-controller
      summary: Getting user by id
      description: Get user by id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Id not found
        '500':
          description: internal server error
    put:
      tags:
        - user-controller
      summary: editing a user with a given id
      description: editing a user with a given id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Id not found
        '500':
          description: internal server error
    delete:
      tags:
        - user-controller
      summary: deleting user by given id
      description: delete the user by id
      responses:
        '204':
          description: OK
        '400':
          description: id not found
        '500':
          description: internal server error
  /users:
    post:
      tags:
        - user-controller
      summary: adding a new user to the list
      description: adding a new user to the list
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '500':
          description: internal server error
    delete:
      tags:
        - user-controller
      summary: deleting all users
      responses:
        '204':
          description: OK
        '500':
          description: internal server error
    get:
      tags:
        - user-controller
      summary: list all users
      description: list of all users
      parameters:
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: filtering
        - name: page
          in: query
          required: false
          schema:
            type: integer
          description: number of page
        - name: size
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'

components:
  schemas:
    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 7
          description: Id of the user
        firstName:
          type: string
          example: "Ivan"
          description: The name of the user
          minLength: 2
          maxLength: 50
        lastName:
          type: string
          example: "Ivanov"
          description: The surname of the user
          minLength: 2
          maxLength: 50
        email:
          type: string
          example: "ivanov@mail.com"
          description: The email of the user
          minLength: 5
          maxLength: 30
        userInfo:
          type: string
          maxLength: 200
          example: "age: 20 and address: Russia"
          description: extra information about the user
        usersVacations:
          type: array
          items:
            $ref: '#/components/schemas/VacationDto'
      required: [id, firstName, lastName]

    ShortUserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 7
          description: Id of the user
        firstName:
          type: string
          example: "Ivan"
          description: The name of the user
          minLength: 2
          maxLength: 50
        lastName:
          type: string
          example: "Ivanov"
          description: The surname of the user
          minLength: 2
          maxLength: 50
        email:
          type: string
          example: "ivanov@mail.com"
          description: The email of the user
          minLength: 5
          maxLength: 30
        usersVacations:
          type: array
          items:
            $ref: '#/components/schemas/VacationDto'
      required: [id, firstName, lastName]

    VacationDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 7
          description: Id of the user's vacation
        dateFrom:
          type: string
#          format: date
          description: date of the beginning of the user's vacation
        dateTo:
          type: string
#          format: date
          description: date of the end of the user's vacation


    UserListResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ShortUserDto'
        pageable:
          $ref: '../pageable/pageable.yaml/#/components/schemas/Pageable'
        total_pages:
          type: integer
        total_elements:
          type: integer
        last:
          type: boolean
        first:
          type: boolean
        size:
          type: integer
        number_of_elements:
          type: integer
        number:
          type: integer
        sort:
          $ref: '../pageable/pageable.yaml#/components/schemas/Sort'
        empty:
          type: boolean


