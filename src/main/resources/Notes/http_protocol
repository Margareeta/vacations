https://habr.com/ru/post/215117/
https://www.objc.io/issues/10-syncing-data/ip-tcp-http/
HTTP

Аббревиатура HTTP расшифровывается как HyperText Transfer Protocol

Протокол HTTP предполагает использование клиент-серверной структуры передачи данных.
1)Клиентское приложение формирует запрос и отправляет его на сервер,
2)серверное программное обеспечение обрабатывает данный запрос, формирует ответ и передаёт его обратно клиенту.
После этого клиентское приложение может продолжить отправлять другие запросы,
которые будут обработаны аналогичным образом.

API многих программных продуктов также подразумевает использование HTTP для передачи данных —
сами данные при этом могут иметь любой формат, например, XML или JSON.

Как правило, передача данных по протоколу HTTP осуществляется через TCP/IP-соединения.
Серверное программное обеспечение при этом обычно использует TCP-порт 80 (и, если порт не указан явно, то обычно
клиентское программное обеспечение по умолчанию использует именно 80-й порт для открываемых HTTP-соединений),
хотя может использовать и любой другой.

Как отправить HTTP-запрос?

Самый простой способ разобраться с протоколом HTTP — это попробовать обратиться к какому-нибудь веб-ресурсу вручную.
(e.g. http://alizar.habrahabr.ru/).
Соответственно вам, как веб-браузеру, теперь необходимо подключиться к веб-серверу по адресу alizar.habrahabr.ru.

Для этого вы можете воспользоваться любой подходящей утилитой командной строки. Например, telnet:
telnet alizar.habrahabr.ru 80
Сразу уточню, что если вы вдруг передумаете, то нажмите Ctrl + «]», и затем ввод —
это позволит вам закрыть HTTP-соединение. Помимо telnet можете попробовать nc (или ncat) — по вкусу.

После того, как вы подключитесь к серверу, нужно отправить HTTP-запрос.

Для того, чтобы сформировать HTTP-запрос, необходимо составить стартовую строку,
а также задать по крайней мере один заголовок — это заголовок Host, который является обязательным,
и должен присутствовать в каждом запросе.
Дело в том, что преобразование доменного имени в IP-адрес осуществляется на стороне клиента, и,
соответственно, когда вы открываете TCP-соединение, то удалённый сервер не обладает никакой информацией
о том, какой именно адрес использовался для соединения:
это мог быть, например, адрес alizar.habrahabr.ru, habrahabr.ru или m.habrahabr.ru
— и во всех этих случаях ответ может отличаться.
Однако фактически сетевое соединение во всех случаях открывается с узлом 212.24.43.44,
и даже если первоначально при открытии соединения был задан не этот IP-адрес,
а какое-либо доменное имя, то сервер об этом никак не информируется —
и именно поэтому этот адрес необходимо передать в заголовке Host.

Стартовая строка запроса:
Метод URI HTTP/Версия

Метод
(в англоязычной тематической литературе используется слово method, а также иногда слово verb — «глагол»)
представляет собой последовательность из любых символов, кроме управляющих и разделителей,
и определяет операцию, которую нужно осуществить с указанным ресурсом.

URI (Uniform Resource Identifier, унифицированный идентификатор ресурса)
путь до конкретного ресурса (например, документа), над которым необходимо осуществить операцию
(например, в случае использования метода GET подразумевается получение ресурса).
Некоторые запросы могут не относиться к какому-либо ресурсу, в этом случае вместо URI в стартовую
строку может быть добавлена звёздочка (астериск, символ «*»).
Например, это может быть запрос, который относится к самому веб-серверу, а не какому-либо
конкретному ресурсу.
В этом случае стартовая строка может выглядеть так:
OPTIONS * HTTP/1.1

Версия
определяет, в соответствии с какой версией стандарта HTTP составлен запрос.
Указывается как два числа, разделённых точкой (например 1.1).

Для того, чтобы обратиться к веб-странице по определённому адресу
(в данном случае путь к ресурсу — это «/»), нам следует отправить следующий запрос:
GET / HTTP/1.1
Host: alizar.habrahabr.ru


Если вы хотите отправить запрос в точном соответствии со спецификацией,
можете воспользоваться управляющими последовательностями \r и \n:
echo -en "GET / HTTP/1.1\r\nHost: alizar.habrahabr.ru\r\n\r\n" | ncat alizar.habrahabr.ru 80


Как прочитать ответ?

Стартовая строка ответа имеет следующую структуру:
HTTP/Версия Код состояния Пояснение

Код состояния (Status Code)
три цифры (первая из которых указывает на класс состояния), которые определяют результат совершения запроса.
Например, в случае, если был использован метод GET, и сервер предоставляет ресурс с указанным идентификатором,
то такое состояние задаётся с помощью кода 200. Если сервер сообщает о том, что такого ресурса не существует — 404.

Пояснение к коду состояния (Reason Phrase)
текстовое (но не включающее символы CR и LF) пояснение к коду ответа, предназначено для упрощения чтения ответа
человеком. Пояснение может не учитываться клиентским программным обеспечением, а также может отличаться от
стандартного в некоторых реализациях серверного ПО.

После стартовой строки следуют заголовки, а также тело ответа.
Например:

HTTP/1.1 200 OK
Server: nginx/1.2.1
Date: Sat, 08 Mar 2014 22:53:46 GMT
Content-Type: application/octet-stream
Content-Length: 7
Last-Modified: Sat, 08 Mar 2014 22:53:30 GMT
Connection: keep-alive
Accept-Ranges: bytes

Wisdom

Тело ответа следует через два переноса строки после последнего заголовка.
Для определения окончания тела ответа используется значение заголовка Content-Length
(в данном случае ответ содержит 7 восьмеричных байтов: слово «Wisdom» и символ переноса строки).

Но вот по тому запросу, который мы составили ранее, веб-сервер вернёт ответ не с кодом 200, а с кодом 302.
Таким образом он сообщает клиенту о том, что обращаться к данному ресурсу на данный момент нужно по другому адресу.
E.g.
HTTP/1.1 302 Moved Temporarily
Server: nginx
Date: Sat, 08 Mar 2014 22:29:53 GMT
Content-Type: text/html
Content-Length: 154
Connection: keep-alive
Keep-Alive: timeout=25
Location: http://habrahabr.ru/users/alizar/


В заголовке Location передан новый адрес. Теперь URI (идентификатор ресурса) изменился на /users/alizar/,
а обращаться нужно на этот раз к серверу по адресу habrahabr.ru (впрочем, в данном случае это тот же самый сервер),
и его же указывать в заголовке Host.
То есть:
GET /users/alizar/ HTTP/1.1
Host: habrahabr.ru

А что с безопасностью?
Сам по себе протокол HTTP не предполагает использование шифрования для передачи информации.
Тем не менее, для HTTP есть распространённое расширение, которое реализует упаковку передаваемых
данных в криптографический протокол SSL или TLS.
Название этого расширения — HTTPS (HyperText Transfer Protocol Secure).
Для HTTPS-соединений обычно используется TCP-порт 443.
HTTPS широко используется для защиты информации от перехвата, а также, как правило,
обеспечивает защиту от атак вида man-in-the-middle — в том случае, если сертификат проверяется на клиенте,
и при этом приватный ключ сертификата не был скомпрометирован,
пользователь не подтверждал использование неподписанного сертификата, и на компьютере пользователя
не были внедрены сертификаты центра сертификации злоумышленника.




